// <auto-generated />
using System;
using LetsParty.Backend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LetsParty.Backend.Migrations
{
    [DbContext(typeof(LetsPartyDbContext))]
    [Migration("20230319124127_Invivta")]
    partial class Invivta
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("GameParty", b =>
                {
                    b.Property<int>("GamesGameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartiesPartyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GamesGameId", "PartiesPartyId");

                    b.HasIndex("PartiesPartyId");

                    b.ToTable("PartiesGames", (string)null);
                });

            modelBuilder.Entity("ItemParty", b =>
                {
                    b.Property<int>("ItemsItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartiesPartyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemsItemId", "PartiesPartyId");

                    b.HasIndex("PartiesPartyId");

                    b.ToTable("PartiesItems", (string)null);
                });

            modelBuilder.Entity("LetsParty.Backend.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfPlayers")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameId");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("LetsParty.Backend.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemId");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("LetsParty.Backend.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("LetsParty.Backend.Models.Party", b =>
                {
                    b.Property<int>("PartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Limit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("PartyId");

                    b.ToTable("parties", (string)null);
                });

            modelBuilder.Entity("LetsParty.Backend.Models.PartyInvite", b =>
                {
                    b.Property<int>("PartyId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("ReceiverId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasKey("PartyId", "OwnerId", "ReceiverId");

                    b.ToTable("party_invites", (string)null);
                });

            modelBuilder.Entity("LetsParty.Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "test@test.com",
                            FirstName = "test",
                            LastName = "test",
                            Password = "test1234",
                            Username = "test"
                        });
                });

            modelBuilder.Entity("LocationParty", b =>
                {
                    b.Property<int>("LocationsLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartiesPartyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LocationsLocationId", "PartiesPartyId");

                    b.HasIndex("PartiesPartyId");

                    b.ToTable("PartiesLocations", (string)null);
                });

            modelBuilder.Entity("PartyUser", b =>
                {
                    b.Property<int>("PartiesPartyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PartiesPartyId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("PartiesUsers", (string)null);
                });

            modelBuilder.Entity("GameParty", b =>
                {
                    b.HasOne("LetsParty.Backend.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsParty.Backend.Models.Party", null)
                        .WithMany()
                        .HasForeignKey("PartiesPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemParty", b =>
                {
                    b.HasOne("LetsParty.Backend.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsParty.Backend.Models.Party", null)
                        .WithMany()
                        .HasForeignKey("PartiesPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LetsParty.Backend.Models.PartyInvite", b =>
                {
                    b.HasOne("LetsParty.Backend.Models.Party", "Party")
                        .WithMany("PartyInvites")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("LocationParty", b =>
                {
                    b.HasOne("LetsParty.Backend.Models.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsParty.Backend.Models.Party", null)
                        .WithMany()
                        .HasForeignKey("PartiesPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartyUser", b =>
                {
                    b.HasOne("LetsParty.Backend.Models.Party", null)
                        .WithMany()
                        .HasForeignKey("PartiesPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsParty.Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LetsParty.Backend.Models.Party", b =>
                {
                    b.Navigation("PartyInvites");
                });
#pragma warning restore 612, 618
        }
    }
}
