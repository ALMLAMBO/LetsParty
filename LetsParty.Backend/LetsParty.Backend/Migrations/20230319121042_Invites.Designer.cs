// <auto-generated />
using System;
using LetsParty.Backend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LetsParty.Backend.Migrations
{
    [DbContext(typeof(LetsPartyDbContext))]
    [Migration("20230319121042_Invites")]
    partial class Invites
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("GameParty", b =>
                {
                    b.Property<int>("GamesGameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartiesPartyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GamesGameId", "PartiesPartyId");

                    b.HasIndex("PartiesPartyId");

                    b.ToTable("GameParty");
                });

            modelBuilder.Entity("ItemParty", b =>
                {
                    b.Property<int>("ItemsItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartiesPartyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemsItemId", "PartiesPartyId");

                    b.HasIndex("PartiesPartyId");

                    b.ToTable("ItemParty");
                });

            modelBuilder.Entity("LetsParty.Backend.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfPlayers")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("LetsParty.Backend.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("LetsParty.Backend.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("LetsParty.Backend.Models.Party", b =>
                {
                    b.Property<int>("PartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Limit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("PartyId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("LetsParty.Backend.Models.PartyInvite", b =>
                {
                    b.Property<int>("PartyId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("ReceiverId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasKey("PartyId", "OwnerId");

                    b.ToTable("party_invites", (string)null);
                });

            modelBuilder.Entity("LetsParty.Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LocationParty", b =>
                {
                    b.Property<int>("LocationsLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartiesPartyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LocationsLocationId", "PartiesPartyId");

                    b.HasIndex("PartiesPartyId");

                    b.ToTable("LocationParty");
                });

            modelBuilder.Entity("PartyInviteUser", b =>
                {
                    b.Property<int>("UsersUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartyInvitesPartyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartyInvitesOwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UsersUserId", "PartyInvitesPartyId", "PartyInvitesOwnerId");

                    b.HasIndex("PartyInvitesPartyId", "PartyInvitesOwnerId");

                    b.ToTable("PartiesInvites", (string)null);
                });

            modelBuilder.Entity("PartyPartyInvite", b =>
                {
                    b.Property<int>("PartiesPartyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartyInvitesPartyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartyInvitesOwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PartiesPartyId", "PartyInvitesPartyId", "PartyInvitesOwnerId");

                    b.HasIndex("PartyInvitesPartyId", "PartyInvitesOwnerId");

                    b.ToTable("PartiesInvs", (string)null);
                });

            modelBuilder.Entity("PartyUser", b =>
                {
                    b.Property<int>("PartiesPartyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PartiesPartyId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("PartyUser");
                });

            modelBuilder.Entity("GameParty", b =>
                {
                    b.HasOne("LetsParty.Backend.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsParty.Backend.Models.Party", null)
                        .WithMany()
                        .HasForeignKey("PartiesPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemParty", b =>
                {
                    b.HasOne("LetsParty.Backend.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsParty.Backend.Models.Party", null)
                        .WithMany()
                        .HasForeignKey("PartiesPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationParty", b =>
                {
                    b.HasOne("LetsParty.Backend.Models.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsParty.Backend.Models.Party", null)
                        .WithMany()
                        .HasForeignKey("PartiesPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartyInviteUser", b =>
                {
                    b.HasOne("LetsParty.Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsParty.Backend.Models.PartyInvite", null)
                        .WithMany()
                        .HasForeignKey("PartyInvitesPartyId", "PartyInvitesOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartyPartyInvite", b =>
                {
                    b.HasOne("LetsParty.Backend.Models.Party", null)
                        .WithMany()
                        .HasForeignKey("PartiesPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsParty.Backend.Models.PartyInvite", null)
                        .WithMany()
                        .HasForeignKey("PartyInvitesPartyId", "PartyInvitesOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartyUser", b =>
                {
                    b.HasOne("LetsParty.Backend.Models.Party", null)
                        .WithMany()
                        .HasForeignKey("PartiesPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsParty.Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
